name: Full CI/CD (Backend + Frontend)

on:
  push:
    branches: [ "main" ]  # main 브랜치에 push될 때 동작
  pull_request:
    branches: [ "main" ]  # PR이 main으로 향할 때도 동작

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 사용하는 가상 환경

    steps:
      # 1️⃣ GitHub Repository Checkout
      - uses: actions/checkout@v4

      # 2️⃣ JDK 17 설치 (Spring Boot용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4️⃣ Backend(Spring Boot) 빌드 (test 제외)
      - name: Build Spring Boot (Backend)
        run: ./gradlew :backend:clean :backend:build -x test


      # 5️⃣ Frontend(React) 빌드
      - name: Build React App (Frontend)
        run: |
          cd frontend/hamlolweb
          npm install
          npm run build

      # 6️⃣ Docker 이미지 빌드 (Backend + Frontend 통합)
      - name: Build Docker Image
        run: docker build -t ryu1002/hamlol-full .

      # 7️⃣ DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ryu1002
          password: ${{ secrets.RYU1002 }}

      # 8️⃣ DockerHub에 이미지 Push
      - name: Push Docker Image
        run: docker push ryu1002/hamlol-full

      # 9️⃣ EC2에 SSH 접속 후 Docker 이미지 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}          # EC2 퍼블릭 IP or 도메인
          username: ec2-user                     # EC2 사용자명
          key: ${{ secrets.EC2_SSH_KEY }}        # pem 키
          script: |
            docker pull ryu1002/hamlol-full
            docker stop hamlol-container || true
            docker rm hamlol-container || true
            docker run -d -p 8080:8080 -p 3000:3000 \
              --name hamlol-container ryu1002/hamlol-full

