// backend/build.gradle

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.example.hamlol'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    queryDslVersion = '5.0.0'
}

dependencies {
    // 1) QueryDSL JPA (runtime + compile)
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"

    // 2) Jakarta Annotation API (compile-only + annotationProcessor)
    compileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'

    // 3) Jakarta Persistence API (implementation + annotationProcessor)
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    // 4) QueryDSL APT (코드 생성)
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"

    // Spring Boot 스타터
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // OpenAPI / DB 드라이버
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // 메일발송 관련 설정
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'jakarta.el:jakarta.el-api:5.0.1'
    runtimeOnly 'org.glassfish:jakarta.el:4.0.2'

    implementation 'commons-io:commons-io:2.11.0'

}

tasks.withType(Test) {
    useJUnitPlatform()
}

springBoot {
    mainClassName  = 'org.example.hamlol.HamlolApplication'
}

// Q-타입(=QueryDSL) 생성 위치를 annotationProcessor 표준 경로로 지정
sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/sources/annotationProcessor/java/main")
        }
    }
}

// annotationProcessor 결과물을 컴파일에 포함
tasks.named('compileJava', JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory =
        file("$buildDir/generated/sources/annotationProcessor/java/main")
}
